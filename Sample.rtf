{\rtf1\ansi\ansicpg1252\deff0{\fonttbl{\f0\froman\fcharset0 Times New Roman;}{\f1\froman\fcharset0 Arial;}}{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red255\green0\blue0;\red255\green255\blue0;}{\stylesheet {\style\s0 \ql\fi0\li0\ri0\f1\fs24\cf0 Normal;}{\style\s3 \ql\fi0\li0\ri0\f1\fs26\b\cf0 heading 3;}{\style\s2 \ql\fi0\li0\ri0\f1\fs28\b\i\cf0 heading 2;}{\style\s1 \ql\fi0\li0\ri0\f1\fs32\b\cf0 heading 1;}}{\*\listtable}{\*\listoverridetable}{\*\generator iText 4.2.0 by 1T3XT}{\info}\paperw11907\paperh16840\margl720\margr720\margt720\margb720\pgwsxn11907\pghsxn16840\marglsxn720\margrsxn720\margtsxn720\margbsxn720\pard\plain\s0\fi0\li0\ri0\plain\f0\cf2 Acknowledgments?\par \par\pard\plain\s0\fi0\li0\ri0\plain\f0\ul\cf3 prueba jp\ul0\par\pard\plain\s0\fi0\li0\ri0\plain\f0\cf0 this without their love, help, and support. And to my parents, Jim and Toni Allen, who?\par displayed tremendous patience with me while I figured out what I was going to do with?\par my life. Finally, thanks to Jonas Bon\u233?r, Viktor Klang, Roland Kuhn, Dragos Manolescu,?\par and Thomas Lockney for their help and guidance.?\par \par\pard\plain\s0\fi0\li0\ri0\plain\f0\cf0 In a domain-driven actor application, actors live and die to represent the state of the?\par world in a live cache, where the mere existence of these actors and their encapsulation?\par of state show the data for your application. They are frequently used in systems where?\par information is provisioned to multiple other servers, which happens in an eventual?\par consistency fashion. This implies that it is plausible that an actor attempting to supply?\par another server may not be able to do so at a given point, and therefore must try until it?\par can.?\par For example, imagine a large financial institution trying to keep a real-time view of all?\par of its customers, with all of their accounts and all of the investments that customer owns?\par via each account at a given time. This information can be created and maintained live?\par through actor-supervisor hierarchies.?\par This kind of real-time domain modeling, where you are in essence creating a cache that?\par also contains behavior, is enabled by the lightweight nature of Akka actors. Because?\par Akka actors share resources (such as threads), each instance only takes about 400 bytes?\par of heap space before you begin adding state for your domain. It is plausible that one?\par server could contain the entire business domain for a large corporation represented in?\par Akka actors.?\par The added benefit of using actors for this kind of domain modeling is that they also?\par introduce fault tolerance: you have the ability to use Akka\u8217?s supervision strategies to?\par ensure high uptime for your system, as opposed to simple caches of domain objects?\par \par}